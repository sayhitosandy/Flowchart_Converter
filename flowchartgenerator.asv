%% Init
close all
clc
clear

%% Initialize files and folders
imgNo = '6'; %Input Image Number
inpFile = strcat(imgNo, '.jpg'); %Input File
inpFolder = './Inputs'; %Input Folder
outFolder = strcat('./Outputs/', imgNo); %Output Folder
inpPath = fullfile(inpFolder, inpFile); %Input Path 
mkdir(outFolder); %Create new output folder

%% Read Image
originalIm = imread(inpPath); 
figure;
imshow(originalIm);
title('Original Image');

%% Convert to grayscale and resize
grayIm = rgb2gray(originalIm);
[nrows, ncols] = size(grayIm); %Image size
nrows = nrows/10; 
ncols = ncols/10;
% r = nrows/ncols; %Ratio
resizedIm = imresize(grayIm, [nrows, ncols]); %Reduce to 1/10th
% resizedIm = imresize(grayIm, [nrows/r, ncols*r]); %Reduce to 1/10th
figure;
imshow(resizedIm);
title('Grayscaled and Resized Image');

%% Gaussian Filter to remove salt and pepper noise
% filteredIm = imgaussfilt(resizedIm, 1);
% figure;
% imshow(filteredIm);

%% Adaptive Thresholding and Binarization
T = adaptthresh(resizedIm, 0.3, 'ForegroundPolarity','dark'); %Adaptive Thresholding
% figure;
% imagesc(T);
binaryIm = imbinarize(resizedIm, T); %Binarization
figure;
imshow(binaryIm);
title('Binary Image');
outFile = 'BinaryImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(binaryIm, outPath);

%% Bitwise Inversion
invertedIm = 1-binaryIm;
figure;
imshow(invertedIm);
title('Inverted Image');
outFile = 'InvertedImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(invertedIm, outPath);

%% Display diff regions in image
% [rgn, n_rgn] = bwlabel(invertedIm);
% figure;
% imagesc(rgn); axis equal;
% title('Image Regions');
% outfil = 'ImageRegions.jpg';
% outpath = fullfile(outfold, outfil);
% imwrite(rgn, outpath);

%% Remove noise
CC = bwconncomp(invertedIm);
S = regionprops(CC, 'Area');
L = labelmatrix(CC);
cleanedIm = ismember(L, find([S.Area] >= 50*nrows/100)); %Keep only those regions which are of area more than specified
% bw = bwareaopen(im, 50);
figure;
imshow(cleanedIm);
title('Image Cleaned');
outFile = 'CleanedImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(cleanedIm, outPath);

%% Image Fill
filledIm = imfill(cleanedIm, 'holes');
figure;
imshow(filledIm);
title('Filled Image');
outFile = 'FilledImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(filledIm, outPath);

%% Edge Detection
edgeIm = edge(filledIm, 'zerocross');
figure;
imshow(edgeIm);
title('Edge Detection');
outFile = 'EdgeDetection.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(edgeIm, outPath);

%% Hough Transform (In-built)
% angle = horizon(filledIm);
% rot = imrotate(filledIm, angle);
% figure;
% imshow(rot);

%% Hough Transform
[H,theta,rho] = hough(edgeIm); %Hough Transform
peaks = houghpeaks(H, 100); %Peaks in hough transform

figure;
imshow(H,[],'XData',theta,'YData',rho,'InitialMagnification','fit');
xlabel('\theta'), ylabel('\rho');
axis on, axis normal, hold on;
plot(theta(peaks(:,2)),rho(peaks(:,1)),'s','color','white');
colormap(gca, hot);
title('Hough Transform Plot');

lines = houghlines(edgeIm,theta,rho,peaks,'FillGap',5,'MinLength',2); 
figure, imshow(cleanedIm), hold on
max_len = 0;
for k = 1:length(lines)
   xy = [lines(k).point1; lines(k).point2];
   plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','green');

   % Plot beginnings and ends of lines
   plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');
   plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');

   % Determine the endpoints of the longest line segment
   len = norm(lines(k).point1 - lines(k).point2);
   if ( len > max_len)
      max_len = len;
      xy_long = xy;
   end
end
title('Detected Lines');

%% Find Best Angle and rotate
lines = houghlines(edgeIm, theta, rho, peaks);

bestAngle = mode([lines.theta])+90; %Most common angle among all lines
cleanedRotatedIm = imrotate(cleanedIm, bestAngle); %Rotate wrt angle 
filledRotatedIm = imrotate(filledIm, bestAngle);
figure;
imshow(cleanedRotatedIm);
title('Rotated Image');
outFile = 'RotatedImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(cleanedRotatedIm, outPath);

figure;
imshow(filledRotatedIm);
title('Filled Image');
outFile = 'RotatedFilledImage.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(filledRotatedIm, outPath);

%% Decomposition into arrows and shapes

se = strel('diamond', 5); %Diamond shaped kernel
openedIm = imopen(filledRotatedIm, se); %Open Filter
bwIm = bwareaopen(openedIm, 50); %Remove arrows
% figure, imshow(bwIm);
arrIm = cleanedRotatedIm - bwIm; %Remove shapes (Only arrows)
arrIm = imbinarize(arrIm);

arrowsIm = bwareaopen(arrIm, 20); %Remove noise
figure, imshow(arrowsIm);
title('Only Arrows');
outFile = 'Arrows.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(arrowsIm, outPath);

shapesIm = cleanedRotatedIm - arrowsIm; %Only shapes
figure;
imshow(shapesIm);
title('Only Shapes');
outFile = 'Shapes.jpg';
outPath = fullfile(outFolder, outFile);
imwrite(shapesIm, outPath);


%% Decompose Shapes into Circles, Rectangles and Diamonds

[shapeLabels,n_shapeLabels] = bwlabel(shapesIm);
figure; imagesc(shapeLabels); axis equal;

shapeProps = regionprops(shapeLabels, 'all');

shapeCentroids = cat(1, shapeProps.Centroid);
shapePerimeters = cat(1, shapeProps.Perimeter);
shapeArea = cat(1, shapeProps.ConvexArea);

circleAreaRatio = (shapePerimeters.^2)./(4*pi*shapeArea);  %circularity metric
rectAreaRatio = NaN(n_shapeLabels,1);

for i = 1:n_shapeLabels
    [p,q] = size(shapeProps(i).FilledImage);
    rectAreaRatio(i) = shapeArea(i)/(p*q);
    figure; imshow(shapeProps(i).FilledImage);
end

isShapeCircle = (circleAreaRatio < 1.1);
isShapeRect = (rectAreaRatio > 0.75);
isShapeRect = isShapeRect .* ~isShapeCircle;
isShapeDiad = (rectAreaRatio <= 0.75);
isShapeDiad = isShapeDiad .* ~isShapeCircle;

%% Find Arrow Orientation, Arrow Head and Arrow Tail

[arrowLabels, n_arrowLabels] = bwlabel(arrowsIm);
figure; imagesc(arrowLabels); axis equal;

arrowProps = regionprops(arrowLabels, 'all');

arrowCentroids = cat(1, arrowProps.Centroid);
arrowBBs = cat(1, arrowProps.BoundingBox);
arrowCentres = [arrowBBs(:, 1) + 0.5*arrowBBs(:, 3), arrowBBs(:, 2) + 0.5*arrowBBs(:, 4)];

figure; imshow(arrowsIm);
hold on;
plot(arrowCentres(:, 1), arrowCentres(:, 2), 'r*', 'LineWidth', 2, 'MarkerSize', 5);
plot(arrowCentroids(:, 1), arrowCentroids(:, 2), 'b*', 'LineWidth', 2, 'MarkerSize', 5);

arrowBBsMidpts = [];
arrowHeads = [];
arrowTails = [];

for i = 1:n_arrowLabels
    hold on;
    arrowOrient = arrowProps(i).Orientation;
    if (abs(abs(arrowOrient)-90) > abs(arrowOrient))
        arrowBBMidpt = [arrowBBs(i, 1), arrowCentres(i, 2);  arrowBBs(i, 1) + arrowBBs(i, 3), arrowCentres(i, 2)];
    else
        arrowBBMidpt = [arrowCentres(i, 1), arrowBBs(i, 2); arrowCentres(i, 1), arrowBBs(i, 2) + arrowBBs(i, 4)];
    end
    
    if (pdist([arrowCentroids(i, :); arrowBBMidpt(1, :)], 'euclidean') <= pdist([arrowCentres(i, :); arrowBBMidpt(1, :)], 'euclidean'))
        arrowHead = arrowBBMidpt(1, :);
        arrowTail = arrowBBMidpt(2, :);
    else
        arrowHead = arrowBBMidpt(2, :);
        arrowTail = arrowBBMidpt(1, :);
    end
    plot(arrowHead(:, 1), arrowHead(:, 2), 'g*', 'LineWidth', 2, 'MarkerSize', 5);
    plot(arrowTail(:, 1), arrowTail(:, 2), 'y*', 'LineWidth', 2, 'MarkerSize', 5);
    arrowBBsMidpts = [arrowBBsMidpts; arrowBBMidpt];
    arrowHeads = [arrowHeads; arrowHead];
    arrowTails = [arrowTails; arrowTail];
end

%%

shapeBBsMidpts = [];

for i=1:n_shapeLabels %clockwise
    
    shapeBBs= shapeProps(i).BoundingBox;

    shapeBBsMidpt1 = [shapeBBs(1) + 0.5*shapeBBs(3), shapeBBs(2)];
    shapeBBsMidpt2 = [shapeBBs(1) + shapeBBs(3), shapeBBs(2) + 0.5*shapeBBs(4)];
    shapeBBsMidpt3 = [shapeBBs(1) + 0.5*shapeBBs(3), shapeBBs(2) + shapeBBs(4)];
    shapeBBsMidpt4 = [shapeBBs(1), shapeBBs(2) + 0.5*shapeBBs(4)];
    shapeBBsMidpts = [shapeBBsMidpts; shapeBBsMidpt1; shapeBBsMidpt2; shapeBBsMidpt3; shapeBBsMidpt4];
end

figure;imshow(shapesIm);
hold on;
plot(shapeBBsMidpts(:, 1), shapeBBsMidpts(:, 2), 'r.');

%%
allheads = [];
alltails = [];
for i=1:size(arrowHeads, 1)
    distances = [];
    for j=1:size(shapeBBsMidpts, 1)
        distance = pdist([arrowHeads(i, 1), arrowHeads(i, 2); shapeBBsMidpts(j, 1), shapeBBsMidpts(j, 2)],'euclidean');
        distances = [distances; distance];
    end
    [~, minidx] = min(distances(:));
    hold on;
%     plot(mids(minidx, 1), mids(minidx, 2), 'g*');
%     plot(heads(i, 1), heads(i, 2), 'b*');
    allheads = [allheads;  shapeBBsMidpts(minidx, :)];
    alltails = [alltails; arrowTails(i, :)];
end
hold on;
plot(allheads(:, 1), allheads(:, 2), 'r*');
plot(alltails(:, 1), alltails(:, 2), 'y*');

arrow('Start', alltails(:, :), 'Stop', allheads(:, :), 'EdgeColor', 'w', 'FaceColor','w');

%% Plot Circles
circleCentres = shapeCentroids(isShapeCircle,:);
radii = shapePerimeters(isShapeCircle,:)./(2*pi);
viscircles(circleCentres,radii,'Color','w');

%% Plot Rectangles